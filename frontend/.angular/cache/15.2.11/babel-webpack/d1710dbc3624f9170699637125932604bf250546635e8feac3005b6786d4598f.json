{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api'; // Remplace cette URL si besoin\n    console.log('HttpClient:', this.http);\n  }\n  // Ajouter une bannière\n  addBanner(formData) {\n    return this.http.post(`${this.apiUrl}/banniere`, formData).pipe(catchError(error => this.handleError(error, 'bannière')));\n  }\n  // Ajouter un événement\n  addEvent(formData) {\n    return this.http.post(`${this.apiUrl}/evenement`, formData).pipe(catchError(error => this.handleError(error, 'événement')));\n  }\n  // Ajouter une publicité\n  addAd(formData) {\n    return this.http.post(`${this.apiUrl}/publicite`, formData).pipe(catchError(error => this.handleError(error, 'publicité')));\n  }\n  // Ajouter une vidéo\n  addVideo(formData) {\n    return this.http.post(`${this.apiUrl}/video`, formData).pipe(catchError(error => this.handleError(error, 'vidéo')));\n  }\n  // Ajouter un produit\n  addProduct(formData) {\n    return this.http.post(`${this.apiUrl}/produit`, formData).pipe(catchError(error => this.handleError(error, 'produit')));\n  }\n  // Ajouter un témoignage\n  addTestimonial(formData) {\n    return this.http.post(`${this.apiUrl}/temoignage`, formData).pipe(catchError(error => this.handleError(error, 'témoignage')));\n  }\n  // Ajouter une actualité\n  addNews(formData) {\n    return this.http.post(`${this.apiUrl}/actualite`, formData).pipe(catchError(error => this.handleError(error, 'actualité')));\n  }\n  // Gérer les erreurs\n  handleError(error, sectionName) {\n    console.error(`Erreur lors de l'ajout de la ${sectionName}`, error);\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(`Une erreur est survenue lors de l'ajout de la ${sectionName}. Veuillez réessayer.`);\n    return throwError(error); // On relance l'erreur pour que le composant puisse la gérer\n  }\n\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAWzD,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IAEPC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACF,IAAI,CAAC;EAAC;EAE7E;EACAG,SAAS,CAACC,QAAkB;IAC1B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,WAAW,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC1EX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,UAAU,CAAC,CAAC,CACzD;EACH;EAEA;EACAE,QAAQ,CAACN,QAAkB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,YAAY,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC3EX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,WAAW,CAAC,CAAC,CAC1D;EACH;EAEA;EACAG,KAAK,CAACP,QAAkB;IACtB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,YAAY,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC3EX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,WAAW,CAAC,CAAC,CAC1D;EACH;EAEA;EACAI,QAAQ,CAACR,QAAkB;IACzB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,QAAQ,EAAEF,QAAQ,CAAC,CAACG,IAAI,CACvEX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,OAAO,CAAC,CAAC,CACtD;EACH;EAEA;EACAK,UAAU,CAACT,QAAkB;IAC3B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,UAAU,EAAEF,QAAQ,CAAC,CAACG,IAAI,CACzEX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,SAAS,CAAC,CAAC,CACxD;EACH;EAEA;EACAM,cAAc,CAACV,QAAkB;IAC/B,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,aAAa,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC5EX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,YAAY,CAAC,CAAC,CAC3D;EACH;EAEA;EACAO,OAAO,CAACX,QAAkB;IACxB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,YAAY,EAAEF,QAAQ,CAAC,CAACG,IAAI,CAC3EX,UAAU,CAACY,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAE,WAAW,CAAC,CAAC,CAC1D;EACH;EAEA;EACQC,WAAW,CAACD,KAAU,EAAEQ,WAAmB;IACjDf,OAAO,CAACO,KAAK,CAAC,gCAAgCQ,WAAW,EAAE,EAAER,KAAK,CAAC;IACnE;IACAS,KAAK,CAAC,iDAAiDD,WAAW,uBAAuB,CAAC;IAC1F,OAAOnB,UAAU,CAACW,KAAK,CAAC,CAAC,CAAC;EAC5B;;;;uBA5DWV,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAoB,SAAZpB,YAAY;MAAAqB,YAFX;IAAM;EAAA","names":["catchError","throwError","AdminService","constructor","http","console","log","addBanner","formData","post","apiUrl","pipe","error","handleError","addEvent","addAd","addVideo","addProduct","addTestimonial","addNews","sectionName","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\webProjet\\frontend\\src\\app\\components\\admin\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n// Interface pour la réponse de l'API\ninterface ApiResponse {\n  success: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  private apiUrl = 'http://localhost:3000/api'; // Remplace cette URL si besoin\n\n  constructor(private http: HttpClient) {console.log('HttpClient:', this.http);}\n\n  // Ajouter une bannière\n  addBanner(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/banniere`, formData).pipe(\n      catchError(error => this.handleError(error, 'bannière'))\n    );\n  }\n\n  // Ajouter un événement\n  addEvent(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/evenement`, formData).pipe(\n      catchError(error => this.handleError(error, 'événement'))\n    );\n  }\n\n  // Ajouter une publicité\n  addAd(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/publicite`, formData).pipe(\n      catchError(error => this.handleError(error, 'publicité'))\n    );\n  }\n\n  // Ajouter une vidéo\n  addVideo(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/video`, formData).pipe(\n      catchError(error => this.handleError(error, 'vidéo'))\n    );\n  }\n\n  // Ajouter un produit\n  addProduct(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/produit`, formData).pipe(\n      catchError(error => this.handleError(error, 'produit'))\n    );\n  }\n\n  // Ajouter un témoignage\n  addTestimonial(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/temoignage`, formData).pipe(\n      catchError(error => this.handleError(error, 'témoignage'))\n    );\n  }\n\n  // Ajouter une actualité\n  addNews(formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/actualite`, formData).pipe(\n      catchError(error => this.handleError(error, 'actualité'))\n    );\n  }\n\n  // Gérer les erreurs\n  private handleError(error: any, sectionName: string): Observable<never> {\n    console.error(`Erreur lors de l'ajout de la ${sectionName}`, error);\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(`Une erreur est survenue lors de l'ajout de la ${sectionName}. Veuillez réessayer.`);\n    return throwError(error); // On relance l'erreur pour que le composant puisse la gérer\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}