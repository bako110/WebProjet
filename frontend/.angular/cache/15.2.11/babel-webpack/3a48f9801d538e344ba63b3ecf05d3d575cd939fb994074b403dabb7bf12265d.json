{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api'; // Remplace cette URL si besoin\n    console.log('HttpClient:', this.http);\n  }\n  // Fonction générique pour envoyer des FormData avec gestion des erreurs\n  sendFormData(endpoint, formData) {\n    const headers = new HttpHeaders({\n      // Ajouter ici des en-têtes si nécessaire, par exemple un token d'authentification\n      'Authorization': 'Bearer your-token-here'\n    });\n    return this.http.post(`${this.apiUrl}/${endpoint}`, formData, {\n      headers\n    }).pipe(catchError(error => this.handleError(error, endpoint)));\n  }\n  // Ajouter une bannière\n  addBanner(formData) {\n    return this.sendFormData('banniere', formData);\n  }\n  // Ajouter un événement\n  addEvent(formData) {\n    return this.sendFormData('evenement', formData);\n  }\n  // Ajouter une publicité\n  addAd(formData) {\n    return this.sendFormData('publicite', formData);\n  }\n  // Ajouter une vidéo\n  addVideo(formData) {\n    return this.sendFormData('video', formData);\n  }\n  // Ajouter un produit\n  addProduct(formData) {\n    return this.sendFormData('produit', formData);\n  }\n  // Ajouter un témoignage\n  addTestimonial(formData) {\n    return this.sendFormData('temoignage', formData);\n  }\n  // Ajouter une actualité\n  addNews(formData) {\n    return this.sendFormData('actualite', formData);\n  }\n  // Gérer les erreurs\n  handleError(error, sectionName) {\n    console.error(`Erreur lors de l'ajout de la ${sectionName}`, error);\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(`Une erreur est survenue lors de l'ajout de la ${sectionName}. Veuillez réessayer.`);\n    return throwError(error); // On relance l'erreur pour que le composant puisse la gérer\n  }\n\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAAqBC,UAAU,EAAEC,UAAU,QAAQ,MAAM;;;AAWzD,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IAG5CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACF,IAAI,CAAC;EACvC;EAEA;EACQG,YAAY,CAACC,QAAgB,EAAEC,QAAkB;IACvD,MAAMC,OAAO,GAAG,IAAIX,WAAW,CAAC;MAC9B;MACA,eAAe,EAAE;KAClB,CAAC;IAEF,OAAO,IAAI,CAACK,IAAI,CAACO,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,IAAIJ,QAAQ,EAAE,EAAEC,QAAQ,EAAE;MAAEC;IAAO,CAAE,CAAC,CAACG,IAAI,CAC1Fb,UAAU,CAACc,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEN,QAAQ,CAAC,CAAC,CACvD;EACH;EAEA;EACAQ,SAAS,CAACP,QAAkB;IAC1B,OAAO,IAAI,CAACF,YAAY,CAAC,UAAU,EAAEE,QAAQ,CAAC;EAChD;EAEA;EACAQ,QAAQ,CAACR,QAAkB;IACzB,OAAO,IAAI,CAACF,YAAY,CAAC,WAAW,EAAEE,QAAQ,CAAC;EACjD;EAEA;EACAS,KAAK,CAACT,QAAkB;IACtB,OAAO,IAAI,CAACF,YAAY,CAAC,WAAW,EAAEE,QAAQ,CAAC;EACjD;EAEA;EACAU,QAAQ,CAACV,QAAkB;IACzB,OAAO,IAAI,CAACF,YAAY,CAAC,OAAO,EAAEE,QAAQ,CAAC;EAC7C;EAEA;EACAW,UAAU,CAACX,QAAkB;IAC3B,OAAO,IAAI,CAACF,YAAY,CAAC,SAAS,EAAEE,QAAQ,CAAC;EAC/C;EAEA;EACAY,cAAc,CAACZ,QAAkB;IAC/B,OAAO,IAAI,CAACF,YAAY,CAAC,YAAY,EAAEE,QAAQ,CAAC;EAClD;EAEA;EACAa,OAAO,CAACb,QAAkB;IACxB,OAAO,IAAI,CAACF,YAAY,CAAC,WAAW,EAAEE,QAAQ,CAAC;EACjD;EAEA;EACQM,WAAW,CAACD,KAAU,EAAES,WAAmB;IACjDlB,OAAO,CAACS,KAAK,CAAC,gCAAgCS,WAAW,EAAE,EAAET,KAAK,CAAC;IACnE;IACAU,KAAK,CAAC,iDAAiDD,WAAW,uBAAuB,CAAC;IAC1F,OAAOtB,UAAU,CAACa,KAAK,CAAC,CAAC,CAAC;EAC5B;;;;uBA5DWZ,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAuB,SAAZvB,YAAY;MAAAwB,YAFX;IAAM;EAAA","names":["HttpHeaders","catchError","throwError","AdminService","constructor","http","console","log","sendFormData","endpoint","formData","headers","post","apiUrl","pipe","error","handleError","addBanner","addEvent","addAd","addVideo","addProduct","addTestimonial","addNews","sectionName","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\webProjet\\frontend\\src\\app\\components\\admin\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\n\n// Interface pour la réponse de l'API\ninterface ApiResponse {\n  success: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  private apiUrl = 'http://localhost:3000/api'; // Remplace cette URL si besoin\n\n  constructor(private http: HttpClient) { \n    console.log('HttpClient:', this.http);\n  }\n\n  // Fonction générique pour envoyer des FormData avec gestion des erreurs\n  private sendFormData(endpoint: string, formData: FormData): Observable<ApiResponse> {\n    const headers = new HttpHeaders({\n      // Ajouter ici des en-têtes si nécessaire, par exemple un token d'authentification\n      'Authorization': 'Bearer your-token-here',\n    });\n\n    return this.http.post<ApiResponse>(`${this.apiUrl}/${endpoint}`, formData, { headers }).pipe(\n      catchError(error => this.handleError(error, endpoint))\n    );\n  }\n\n  // Ajouter une bannière\n  addBanner(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('banniere', formData);\n  }\n\n  // Ajouter un événement\n  addEvent(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('evenement', formData);\n  }\n\n  // Ajouter une publicité\n  addAd(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('publicite', formData);\n  }\n\n  // Ajouter une vidéo\n  addVideo(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('video', formData);\n  }\n\n  // Ajouter un produit\n  addProduct(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('produit', formData);\n  }\n\n  // Ajouter un témoignage\n  addTestimonial(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('temoignage', formData);\n  }\n\n  // Ajouter une actualité\n  addNews(formData: FormData): Observable<ApiResponse> {\n    return this.sendFormData('actualite', formData);\n  }\n\n  // Gérer les erreurs\n  private handleError(error: any, sectionName: string): Observable<never> {\n    console.error(`Erreur lors de l'ajout de la ${sectionName}`, error);\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(`Une erreur est survenue lors de l'ajout de la ${sectionName}. Veuillez réessayer.`);\n    return throwError(error); // On relance l'erreur pour que le composant puisse la gérer\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}