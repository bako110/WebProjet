{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api'; // Base de l'URL API\n  }\n  // Ajout générique d'un élément (bannière, événement, etc.)\n  addItem(endpoint, formData, itemType) {\n    return this.http.post(`${this.apiUrl}/${endpoint}`, formData).pipe(catchError(error => this.handleError(error, itemType)));\n  }\n  // Ajouter une bannière\n  addBanner(formData) {\n    return this.addItem('banniere', formData, 'bannière');\n  }\n  // Ajouter un événement\n  addEvent(formData) {\n    return this.addItem('evenement', formData, 'événement');\n  }\n  // Ajouter une publicité\n  addAd(formData) {\n    return this.addItem('publicite', formData, 'publicité');\n  }\n  // Ajouter une vidéo\n  addVideo(formData) {\n    return this.addItem('video', formData, 'vidéo');\n  }\n  // Ajouter un produit\n  addProduct(formData) {\n    return this.addItem('produit', formData, 'produit');\n  }\n  // Ajouter un témoignage\n  addTestimonial(formData) {\n    return this.addItem('temoignage', formData, 'témoignage');\n  }\n  // Ajouter une actualité\n  addNews(formData) {\n    return this.addItem('actualite', formData, 'actualité');\n  }\n  // Gestion des erreurs\n  handleError(error, itemType) {\n    console.error(`Erreur lors de l'ajout de la ${itemType}:`, error);\n    // Message utilisateur plus clair\n    const userFriendlyMessage = `Erreur lors de l'ajout de la ${itemType}. Veuillez réessayer plus tard.`;\n    alert(userFriendlyMessage);\n    return throwError(() => new Error(userFriendlyMessage));\n  }\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAW3C,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFP,WAAM,GAAG,2BAA2B,CAAC,CAAC;EAEhB;EAEvC;EACQC,OAAO,CAACC,QAAgB,EAAEC,QAAkB,EAAEC,QAAgB;IACpE,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,IAAIJ,QAAQ,EAAE,EAAEC,QAAQ,CAAC,CAACI,IAAI,CAC7EV,UAAU,CAACW,KAAK,IAAI,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEJ,QAAQ,CAAC,CAAC,CACvD;EACH;EAEA;EACAM,SAAS,CAACP,QAAkB;IAC1B,OAAO,IAAI,CAACF,OAAO,CAAC,UAAU,EAAEE,QAAQ,EAAE,UAAU,CAAC;EACvD;EAEA;EACAQ,QAAQ,CAACR,QAAkB;IACzB,OAAO,IAAI,CAACF,OAAO,CAAC,WAAW,EAAEE,QAAQ,EAAE,WAAW,CAAC;EACzD;EAEA;EACAS,KAAK,CAACT,QAAkB;IACtB,OAAO,IAAI,CAACF,OAAO,CAAC,WAAW,EAAEE,QAAQ,EAAE,WAAW,CAAC;EACzD;EAEA;EACAU,QAAQ,CAACV,QAAkB;IACzB,OAAO,IAAI,CAACF,OAAO,CAAC,OAAO,EAAEE,QAAQ,EAAE,OAAO,CAAC;EACjD;EAEA;EACAW,UAAU,CAACX,QAAkB;IAC3B,OAAO,IAAI,CAACF,OAAO,CAAC,SAAS,EAAEE,QAAQ,EAAE,SAAS,CAAC;EACrD;EAEA;EACAY,cAAc,CAACZ,QAAkB;IAC/B,OAAO,IAAI,CAACF,OAAO,CAAC,YAAY,EAAEE,QAAQ,EAAE,YAAY,CAAC;EAC3D;EAEA;EACAa,OAAO,CAACb,QAAkB;IACxB,OAAO,IAAI,CAACF,OAAO,CAAC,WAAW,EAAEE,QAAQ,EAAE,WAAW,CAAC;EACzD;EAEA;EACQM,WAAW,CAACD,KAAwB,EAAEJ,QAAgB;IAC5Da,OAAO,CAACT,KAAK,CAAC,gCAAgCJ,QAAQ,GAAG,EAAEI,KAAK,CAAC;IAEjE;IACA,MAAMU,mBAAmB,GAAG,gCAAgCd,QAAQ,iCAAiC;IACrGe,KAAK,CAACD,mBAAmB,CAAC;IAE1B,OAAOtB,UAAU,CAAC,MAAM,IAAIwB,KAAK,CAACF,mBAAmB,CAAC,CAAC;EACzD;;;uBAxDWpB,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAAuB,SAAZvB,YAAY;MAAAwB,YAFX;IAAM;EAAA","names":["throwError","catchError","AdminService","constructor","http","addItem","endpoint","formData","itemType","post","apiUrl","pipe","error","handleError","addBanner","addEvent","addAd","addVideo","addProduct","addTestimonial","addNews","console","userFriendlyMessage","alert","Error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\webProjet\\frontend\\src\\app\\components\\admin\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// Interface standard pour la réponse API\ninterface ApiResponse {\n  success: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  private readonly apiUrl = 'http://localhost:3000/api'; // Base de l'URL API\n\n  constructor(private http: HttpClient) {}\n\n  // Ajout générique d'un élément (bannière, événement, etc.)\n  private addItem(endpoint: string, formData: FormData, itemType: string): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}/${endpoint}`, formData).pipe(\n      catchError(error => this.handleError(error, itemType))\n    );\n  }\n\n  // Ajouter une bannière\n  addBanner(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('banniere', formData, 'bannière');\n  }\n\n  // Ajouter un événement\n  addEvent(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('evenement', formData, 'événement');\n  }\n\n  // Ajouter une publicité\n  addAd(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('publicite', formData, 'publicité');\n  }\n\n  // Ajouter une vidéo\n  addVideo(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('video', formData, 'vidéo');\n  }\n\n  // Ajouter un produit\n  addProduct(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('produit', formData, 'produit');\n  }\n\n  // Ajouter un témoignage\n  addTestimonial(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('temoignage', formData, 'témoignage');\n  }\n\n  // Ajouter une actualité\n  addNews(formData: FormData): Observable<ApiResponse> {\n    return this.addItem('actualite', formData, 'actualité');\n  }\n\n  // Gestion des erreurs\n  private handleError(error: HttpErrorResponse, itemType: string): Observable<never> {\n    console.error(`Erreur lors de l'ajout de la ${itemType}:`, error);\n\n    // Message utilisateur plus clair\n    const userFriendlyMessage = `Erreur lors de l'ajout de la ${itemType}. Veuillez réessayer plus tard.`;\n    alert(userFriendlyMessage);\n\n    return throwError(() => new Error(userFriendlyMessage));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}