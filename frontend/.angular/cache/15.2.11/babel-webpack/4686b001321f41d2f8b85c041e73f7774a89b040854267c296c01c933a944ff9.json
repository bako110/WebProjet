{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(adminService) {\n    this.adminService = adminService;\n    // Structure des données pour chaque section\n    this.banner = {\n      title: '',\n      image: null,\n      description: '',\n      ctaLink: ''\n    };\n    // Exemple pour les autres sections\n    this.event = {\n      title: '',\n      image: null,\n      description: '',\n      date: ''\n    };\n    this.sections = [{\n      key: 'banner',\n      title: 'Bannière'\n    }, {\n      key: 'event',\n      title: 'Événement'\n    }\n    // Ajoute d'autres sections selon tes besoins\n    ];\n\n    this.sections = [{\n      key: 'banner',\n      title: 'Bannière'\n    }, {\n      key: 'event',\n      title: 'Événement'\n    }, {\n      key: 'ad',\n      title: 'Publicité'\n    }, {\n      key: 'video',\n      title: 'Vidéo'\n    }, {\n      key: 'product',\n      title: 'Produit'\n    }, {\n      key: 'testimonial',\n      title: 'Témoignage'\n    }, {\n      key: 'news',\n      title: 'Actualité'\n    }];\n    this.expandedSection = null;\n    this.visibleForms = {};\n  }\n  // Gérer le changement de fichier (image)\n  onFileChange(event, field) {\n    const file = event.target.files[0];\n    if (field === 'image') {\n      this.banner.image = file; // Pour la bannière\n    }\n\n    if (field === 'eventImage') {\n      this.event.image = file; // Pour l'événement\n    }\n  }\n  // Fonction pour soumettre le formulaire\n  submitForm(sectionKey) {\n    let formData = new FormData();\n    if (sectionKey === 'banner') {\n      formData.append('title', this.banner.title);\n      formData.append('description', this.banner.description);\n      formData.append('ctaLink', this.banner.ctaLink);\n      formData.append('image', this.banner.image);\n      this.adminService.addBanner(formData).subscribe(response => {\n        console.log('Bannière ajoutée avec succès!', response);\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de la bannière', error);\n      });\n    }\n    if (sectionKey === 'event') {\n      formData.append('title', this.event.title);\n      formData.append('description', this.event.description);\n      formData.append('date', this.event.date);\n      formData.append('image', this.event.image);\n      this.adminService.addEvent(formData).subscribe(response => {\n        console.log('Événement ajouté avec succès!', response);\n      }, error => {\n        console.error('Erreur lors de l\\'ajout de l\\'événement', error);\n      });\n    }\n  }\n  // Fonction pour afficher ou cacher le formulaire\n  isFormVisible(key) {\n    return true; // Si tu veux gérer l'affichage dynamique, ajuste cette logique\n  }\n  // Fonction pour développer une section (exemple)\n  expandSection(key, event) {\n    // Logic to expand/collapse sections\n  }\n  expandSection(section, event) {\n    event.stopPropagation();\n    this.expandedSection = this.expandedSection === section ? null : section;\n  }\n  isExpanded(section) {\n    return this.expandedSection === section;\n  }\n  toggleForm(section, event) {\n    event.stopPropagation();\n    this.visibleForms[section] = !this.visibleForms[section];\n  }\n  isFormVisible(section) {\n    return this.visibleForms[section] || false;\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"mappings":"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","names":["Component","DashboardComponent","constructor","adminService","title","image","description","ctaLink","date","key","onFileChange","event","field","file","target","files","banner","submitForm","sectionKey","formData","FormData","append","addBanner","subscribe","response","console","log","error","addEvent","isFormVisible","expandSection","section","stopPropagation","expandedSection","isExpanded","toggleForm","visibleForms","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\user\\webProjet\\frontend\\src\\app\\components\\admin\\dashboard\\dashboard.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent {\n  \n    // Structure des données pour chaque section\n    banner = {\n      title: '',\n      image: null,\n      description: '',\n      ctaLink: ''\n    };\n  \n    // Exemple pour les autres sections\n    event = {\n      title: '',\n      image: null,\n      description: '',\n      date: ''\n    };\n  \n    sections = [\n      { key: 'banner', title: 'Bannière' },\n      { key: 'event', title: 'Événement' },\n      // Ajoute d'autres sections selon tes besoins\n    ];\n  \n    constructor(private adminService: AdminService) {}\n  \n    // Gérer le changement de fichier (image)\n    onFileChange(event: any, field: string) {\n      const file = event.target.files[0];\n      if (field === 'image') {\n        this.banner.image = file; // Pour la bannière\n      }\n      if (field === 'eventImage') {\n        this.event.image = file; // Pour l'événement\n      }\n    }\n  \n    // Fonction pour soumettre le formulaire\n    submitForm(sectionKey: string) {\n      let formData = new FormData();\n  \n      if (sectionKey === 'banner') {\n        formData.append('title', this.banner.title);\n        formData.append('description', this.banner.description);\n        formData.append('ctaLink', this.banner.ctaLink);\n        formData.append('image', this.banner.image);\n        this.adminService.addBanner(formData).subscribe(response => {\n          console.log('Bannière ajoutée avec succès!', response);\n        }, error => {\n          console.error('Erreur lors de l\\'ajout de la bannière', error);\n        });\n      }\n  \n      if (sectionKey === 'event') {\n        formData.append('title', this.event.title);\n        formData.append('description', this.event.description);\n        formData.append('date', this.event.date);\n        formData.append('image', this.event.image);\n        this.adminService.addEvent(formData).subscribe(response => {\n          console.log('Événement ajouté avec succès!', response);\n        }, error => {\n          console.error('Erreur lors de l\\'ajout de l\\'événement', error);\n        });\n      }\n    }\n  \n    // Fonction pour afficher ou cacher le formulaire\n    isFormVisible(key: string): boolean {\n      return true;  // Si tu veux gérer l'affichage dynamique, ajuste cette logique\n    }\n  \n    // Fonction pour développer une section (exemple)\n    expandSection(key: string, event: any) {\n      // Logic to expand/collapse sections\n    }\n  sections = [\n    { key: 'banner', title: 'Bannière' },\n    { key: 'event', title: 'Événement' },\n    { key: 'ad', title: 'Publicité' },\n    { key: 'video', title: 'Vidéo' },\n    { key: 'product', title: 'Produit' },\n    { key: 'testimonial', title: 'Témoignage' },\n    { key: 'news', title: 'Actualité' }\n  ];\n\n  expandedSection: string | null = null;\n  visibleForms: { [key: string]: boolean } = {};\n\n  expandSection(section: string, event: Event) {\n    event.stopPropagation();\n    this.expandedSection = this.expandedSection === section ? null : section;\n  }\n\n  isExpanded(section: string): boolean {\n    return this.expandedSection === section;\n  }\n\n  toggleForm(section: string, event: Event) {\n    event.stopPropagation();\n    this.visibleForms[section] = !this.visibleForms[section];\n  }\n\n  isFormVisible(section: string): boolean {\n    return this.visibleForms[section] || false;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}