{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AdminService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/api'; // URL de l'API, pensez à la rendre configurable\n    console.log('HttpClient:', this.http);\n  }\n  // Méthode générique pour envoyer des données\n  postData(endpoint, formData) {\n    return this.http.post(`${this.apiUrl}${endpoint}`, formData).pipe(catchError(error => this.handleError(error, endpoint)));\n  }\n  // Ajouter une bannière\n  addBanner(formData) {\n    return this.postData('/banniere', formData);\n  }\n  // Ajouter un événement\n  addEvent(formData) {\n    return this.postData('/evenement', formData);\n  }\n  // Ajouter une publicité\n  addAd(formData) {\n    return this.postData('/publicite', formData);\n  }\n  // Ajouter une vidéo\n  addVideo(formData) {\n    return this.postData('/video', formData);\n  }\n  // Ajouter un produit\n  addProduct(formData) {\n    return this.postData('/produit', formData);\n  }\n  // Ajouter un témoignage\n  addTestimonial(formData) {\n    return this.postData('/temoignage', formData);\n  }\n  // Ajouter une actualité\n  addNews(formData) {\n    return this.postData('/actualite', formData);\n  }\n  // Gérer les erreurs\n  handleError(error, sectionName) {\n    let errorMessage = `Une erreur est survenue lors de l'ajout de la ${sectionName}.`;\n    if (error.error instanceof ErrorEvent) {\n      // Erreur côté client\n      errorMessage = `Erreur côté client: ${error.error.message}`;\n    } else {\n      // Erreur côté serveur\n      errorMessage = `Erreur côté serveur: ${error.status} - ${error.message}`;\n    }\n    // Log l'erreur dans la console pour le débogage\n    console.error(`Erreur lors de l'ajout de la ${sectionName}:`, errorMessage);\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(errorMessage);\n    return throwError(errorMessage); // Lancer l'erreur pour qu'elle soit gérée ailleurs\n  }\n  // Méthode pour envoyer la vidéo et gérer la réponse\n  // Assurez-vous que la méthode uploadVideo retourne un Observable\n  uploadVideo(formData) {\n    const headers = new HttpHeaders();\n    // Ajoutez des en-têtes si nécessaire (par exemple pour les tokens d'authentification)\n    // headers.append('Authorization', 'Bearer votre-token');\n    return this.http.post(`http://localhost:3000/api/upload/video`, formData, {\n      con,\n      headers: headers,\n      observe: 'response'\n    });\n  }\n  static {\n    this.ɵfac = function AdminService_Factory(t) {\n      return new (t || AdminService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AdminService,\n      factory: AdminService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAwC,sBAAsB;AAC9F,SAAqBC,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAW3C,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFhB,WAAM,GAAG,2BAA2B,CAAC,CAAC;IAG5CC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE,IAAI,CAACF,IAAI,CAAC;EACvC;EAEA;EACQG,QAAQ,CAACC,QAAgB,EAAEC,QAAkB;IACnD,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAc,GAAG,IAAI,CAACC,MAAM,GAAGH,QAAQ,EAAE,EAAEC,QAAQ,CAAC,CAACG,IAAI,CAC5EX,UAAU,CAAEY,KAAK,IAAK,IAAI,CAACC,WAAW,CAACD,KAAK,EAAEL,QAAQ,CAAC,CAAC,CACzD;EACH;EAEA;EACAO,SAAS,CAACN,QAAkB;IAC1B,OAAO,IAAI,CAACF,QAAQ,CAAC,WAAW,EAAEE,QAAQ,CAAC;EAC7C;EAEA;EACAO,QAAQ,CAACP,QAAkB;IACzB,OAAO,IAAI,CAACF,QAAQ,CAAC,YAAY,EAAEE,QAAQ,CAAC;EAC9C;EAEA;EACAQ,KAAK,CAACR,QAAkB;IACtB,OAAO,IAAI,CAACF,QAAQ,CAAC,YAAY,EAAEE,QAAQ,CAAC;EAC9C;EAEA;EACAS,QAAQ,CAACT,QAAkB;IACzB,OAAO,IAAI,CAACF,QAAQ,CAAC,QAAQ,EAAEE,QAAQ,CAAC;EAC1C;EAEA;EACAU,UAAU,CAACV,QAAkB;IAC3B,OAAO,IAAI,CAACF,QAAQ,CAAC,UAAU,EAAEE,QAAQ,CAAC;EAC5C;EAEA;EACAW,cAAc,CAACX,QAAkB;IAC/B,OAAO,IAAI,CAACF,QAAQ,CAAC,aAAa,EAAEE,QAAQ,CAAC;EAC/C;EAEA;EACAY,OAAO,CAACZ,QAAkB;IACxB,OAAO,IAAI,CAACF,QAAQ,CAAC,YAAY,EAAEE,QAAQ,CAAC;EAC9C;EAEA;EACQK,WAAW,CAACD,KAAwB,EAAES,WAAmB;IAC/D,IAAIC,YAAY,GAAG,iDAAiDD,WAAW,GAAG;IAElF,IAAIT,KAAK,CAACA,KAAK,YAAYW,UAAU,EAAE;MACrC;MACAD,YAAY,GAAG,uBAAuBV,KAAK,CAACA,KAAK,CAACY,OAAO,EAAE;KAC5D,MAAM;MACL;MACAF,YAAY,GAAG,wBAAwBV,KAAK,CAACa,MAAM,MAAMb,KAAK,CAACY,OAAO,EAAE;;IAG1E;IACApB,OAAO,CAACQ,KAAK,CAAC,gCAAgCS,WAAW,GAAG,EAAEC,YAAY,CAAC;IAE3E;IACAI,KAAK,CAACJ,YAAY,CAAC;IAEnB,OAAOvB,UAAU,CAACuB,YAAY,CAAC,CAAC,CAAC;EACnC;EAEA;EACA;EACAK,WAAW,CAACnB,QAAkB;IAC5B,MAAMoB,OAAO,GAAG,IAAI9B,WAAW,EAAE;IACjC;IACA;IAEA,OAAO,IAAI,CAACK,IAAI,CAACM,IAAI,CAAoB,wCAAwC,EAAED,QAAQ,EAAE;MAC3FqB,GAAG;MACHD,OAAO,EAAEA,OAAO;MAChBE,OAAO,EAAE;KACV,CAAC;EACN;;;uBAlFa7B,YAAY;IAAA;EAAA;;;aAAZA,YAAY;MAAA8B,SAAZ9B,YAAY;MAAA+B,YAFX;IAAM;EAAA","names":["HttpHeaders","throwError","catchError","AdminService","constructor","http","console","log","postData","endpoint","formData","post","apiUrl","pipe","error","handleError","addBanner","addEvent","addAd","addVideo","addProduct","addTestimonial","addNews","sectionName","errorMessage","ErrorEvent","message","status","alert","uploadVideo","headers","con","observe","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\user\\webProjet\\frontend\\src\\app\\components\\admin\\admin.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpResponse,HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n// Interface pour la réponse de l'API\ninterface ApiResponse {\n  success: boolean;\n  message: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AdminService {\n  private apiUrl = 'http://localhost:3000/api'; // URL de l'API, pensez à la rendre configurable\n\n  constructor(private http: HttpClient) {\n    console.log('HttpClient:', this.http);\n  }\n\n  // Méthode générique pour envoyer des données\n  private postData(endpoint: string, formData: FormData): Observable<ApiResponse> {\n    return this.http.post<ApiResponse>(`${this.apiUrl}${endpoint}`, formData).pipe(\n      catchError((error) => this.handleError(error, endpoint))\n    );\n  }\n\n  // Ajouter une bannière\n  addBanner(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/banniere', formData);\n  }\n\n  // Ajouter un événement\n  addEvent(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/evenement', formData);\n  }\n\n  // Ajouter une publicité\n  addAd(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/publicite', formData);\n  }\n\n  // Ajouter une vidéo\n  addVideo(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/video', formData);\n  }\n\n  // Ajouter un produit\n  addProduct(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/produit', formData);\n  }\n\n  // Ajouter un témoignage\n  addTestimonial(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/temoignage', formData);\n  }\n\n  // Ajouter une actualité\n  addNews(formData: FormData): Observable<ApiResponse> {\n    return this.postData('/actualite', formData);\n  }\n\n  // Gérer les erreurs\n  private handleError(error: HttpErrorResponse, sectionName: string): Observable<never> {\n    let errorMessage = `Une erreur est survenue lors de l'ajout de la ${sectionName}.`;\n\n    if (error.error instanceof ErrorEvent) {\n      // Erreur côté client\n      errorMessage = `Erreur côté client: ${error.error.message}`;\n    } else {\n      // Erreur côté serveur\n      errorMessage = `Erreur côté serveur: ${error.status} - ${error.message}`;\n    }\n\n    // Log l'erreur dans la console pour le débogage\n    console.error(`Erreur lors de l'ajout de la ${sectionName}:`, errorMessage);\n\n    // Optionnel : Afficher un message d'erreur plus utilisateur-friendly\n    alert(errorMessage);\n\n    return throwError(errorMessage); // Lancer l'erreur pour qu'elle soit gérée ailleurs\n  }\n\n  // Méthode pour envoyer la vidéo et gérer la réponse\n  // Assurez-vous que la méthode uploadVideo retourne un Observable\n  uploadVideo(formData: FormData): Observable<HttpResponse<any>> {\n    const headers = new HttpHeaders();\n    // Ajoutez des en-têtes si nécessaire (par exemple pour les tokens d'authentification)\n    // headers.append('Authorization', 'Bearer votre-token');\n\n    return this.http.post<HttpResponse<any>>(`http://localhost:3000/api/upload/video`, formData, {\n      con\n      headers: headers,\n      observe: 'response'\n    });\n}\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}